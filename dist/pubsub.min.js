/**
 * PubSub
 * Javascript implementation of the Publish/Subscribe pattern.
 *
 * @version 2.1.0
 * @author George Raptis <georapbox@gmail.com> (georapbox.github.io)
 * @homepage https://github.com/georapbox/PubSub#readme
 * @repository git+https://github.com/georapbox/PubSub.git
 * @license MIT
 */
!function(a,b,c){"use strict";"function"==typeof define&&define.amd?define(c):"undefined"!=typeof module&&module.exports?module.exports=c():b[a]=c()}("PubSub",this,function(){"use strict";function a(a){return function(){return this[a].apply(this,arguments)}}function b(a,b,c){for(var d,e,f=a.topics[b],g=f?f.length:0;g;)g-=1,e=f[g].token,d=f[g],d.callback(c,{name:b,token:e}),d.once===!0&&a.unsubscribe(e)}function c(a,c,d,e){return!!a.topics[c]&&(e?b(a,c,d):setTimeout(function(){b(a,c,d)},0),!0)}function d(){this.topics={},this.subUid=-1}return d.prototype.subscribe=function(a,b,c){var d=this.subUid+=1,e={};if("function"!=typeof b)throw new TypeError("When subscribing for an event, a callback function must be defined.");return this.topics[a]||(this.topics[a]=[]),e.token=d,e.callback=b,e.once=!!c,this.topics[a].push(e),d},d.prototype.subscribeOnce=function(a,b){return this.subscribe(a,b,!0)},d.prototype.publish=function(a,b){return c(this,a,b,!1)},d.prototype.publishSync=function(a,b){return c(this,a,b,!0)},d.prototype.unsubscribe=function(a){var b,c,d=!1;for(b in this.topics)if(Object.hasOwnProperty.call(this.topics,b)&&this.topics[b]){for(c=this.topics[b].length;c;){if(c-=1,this.topics[b][c].token===a)return this.topics[b].splice(c,1),a;b===a&&(this.topics[b].splice(c,1),d=!0)}if(d===!0)return a}return!1},d.prototype.hasSubscribers=function(a){var b=this.topics;return!!(Object.hasOwnProperty.call(b,a)&&b[a].length>0)},d.prototype.on=a("subscribe"),d.prototype.once=a("subscribeOnce"),d.prototype.trigger=a("publish"),d.prototype.triggerSync=a("publishSync"),d.prototype.off=a("unsubscribe"),d.prototype.has=a("hasSubscribers"),d});