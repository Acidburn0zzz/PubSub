/**
 * PubSub
 * Javascript implementation of the Publish/Subscribe pattern.
 *
 * @version 2.0.3
 * @author George Raptis <georapbox@gmail.com> (georapbox.github.io)
 * @homepage https://github.com/georapbox/PubSub#readme
 * @repository git+https://github.com/georapbox/PubSub.git
 * @license MIT
 */
!function(a,b,c){"use strict";"function"==typeof define&&define.amd?define(c):"undefined"!=typeof module&&module.exports?module.exports=c():b[a]=c()}("PubSub",this,function(){"use strict";function a(){this.topics={},this.subUid=-1}function b(a){return function(){return this[a].apply(this,arguments)}}return a.prototype.subscribe=function(a,b,c){var d=this.subUid+=1,e={};if("function"!=typeof b)throw new TypeError("When subscribing for an event, a callback function must be defined.");return this.topics[a]||(this.topics[a]=[]),e.token=d,e.callback=b,e.once=!!c,this.topics[a].push(e),d},a.prototype.subscribeOnce=function(a,b){return this.subscribe(a,b,!0)},a.prototype.publish=function(a,b){var c,d,e,f,g=this;return!!this.topics[a]&&(setTimeout(function(){for(d=g.topics[a],c=d?d.length:0;c;)c-=1,f=d[c].token,e=d[c],e.callback(b,{name:a,token:f}),e.once===!0&&g.unsubscribe(f)},0),!0)},a.prototype.unsubscribe=function(a){var b,c,d=!1;for(b in this.topics)if(Object.hasOwnProperty.call(this.topics,b)&&this.topics[b]){for(c=this.topics[b].length;c;){if(c-=1,this.topics[b][c].token===a)return this.topics[b].splice(c,1),a;b===a&&(this.topics[b].splice(c,1),d=!0)}if(d===!0)return a}return!1},a.prototype.on=b("subscribe"),a.prototype.once=b("subscribeOnce"),a.prototype.trigger=b("publish"),a.prototype.off=b("unsubscribe"),a});